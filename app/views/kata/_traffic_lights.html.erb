
<div id="traffic-lights"></div>

<script type="text/javascript">
'use strict';
$(() => {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // There are two sequences of traffic-lights:
  // o) kata-page traffic-lights live under #traffic-lights.
  //    Click any of these to open the diff-review
  // o) review-page traffic-lights live under #review-traffic-lights.
  //    Click any of these to move to it in the diff-review.
  // The first of these are controlled here.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const id = '<%= @id %>';
  const groupId = '<%= @group_id %>';
  const avatarName = '<%= @avatar_name %>';

  const avatarIndex = '<%= @avatar_index %>';
  const version = '<%= @version %>';

  const $lights = $('#traffic-lights');

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Every event has a unique index property.
  // Not every event is necessarily visible though.
  // Number is the number of next visible event.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var number = 1;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.appendTrafficLight() sets up the tip/click handlers
  // for the kata-page (but not review-page) traffic-lights.
  // It is called in these places:
  //   1) From this file
  //      - This happens when a page loads.
  //      - It sets up the existing traffic-lights.
  //   2) From views/kata/run_tests.js.erb
  //      - This happens when you run the [test]s
  //      - It sets up the new traffic-light.
  //   3) From views/review/_review.html.erb
  //      - When you click the [revert] button.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.appendTrafficLight = (light) => {
    const index = light.index;
    const colour = light.colour;
    // There are events that do not directly correspond
    // to a traffic-light. For example, the kata creation event.
    // In the future there may be more, eg file new|delete|rename events.
    if (colour) {
      appendRevertImage($lights, light);
      appendPredictImage($lights, light);
      const $div = $('<div>', {
        'class':'diff-traffic-light',
        'data-id':id,
        'data-number':number,
        'data-index':index,
        'data-avatar-index':avatarIndex,
        'data-colour':colour
      });
      const $light = $div.append($trafficLightImage(light));
      $lights.append($light);
      $light.click(() => cd.setReviewData(version, id, groupId, avatarName, avatarIndex, index-1, index));
      cd.setupTrafficLightTip($light, version, id, avatarIndex, index-1, index, number);
      number += 1;
      updateCountData(light);
      counts.lastLight = light;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const appendRevertImage = ($lights, light) => {
    if (isRevert(light)) {
      $lights.append($('<img>', {
        class: 'revert',
          src: '/images/traffic-light/circle-revert.png'
      }));
    }
  };

  const isRevert = (light) => light.revert != undefined;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const appendPredictImage = ($lights, light) => {
    if (isPredict(light)) {
      const correct = (light.predicted === light.colour);
      const icon = correct ? 'tick' : 'cross';
      $lights.append($('<img>', {
        class: icon,
          src: `/images/traffic-light/circle-${icon}.png`
      }));
    }
  };

  const isPredict = (light) => light.predicted != undefined && light.predicted != 'none';

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const $trafficLightImage = (light) =>
    $('<img>', {
      src: `/images/traffic-light/${light.colour}.png`,
      alt: `${light.colour} traffic-light`
    });

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.updateTrafficLightsCount() updates the total-count and
  // the predicted-counts. It is called from these places:
  //   1) views/kata/_edit.html.erb when page loads/refreshes.
  //   2) views/kata/run_tests.js.erb when [test] is clicked.
  //   3) views/review/_review.html.erb when [revert] is clicked.

  cd.updateTrafficLightsCount = () => {
    updateTrafficLightsTotalCount();
    if (cd.settings.predict() === 'on') {
      updateTrafficLightsPredictCount();
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Visibility of the predict-box is controlled from settings
  cd.countPredictBox = () => $('#traffic-lights-count-predict-box');

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cd.trafficLightsCount = (filter) => {
    let count = 0;
    if (filter === undefined) {
      filter = ['pulling','red','amber','green','timed_out','faulty'];
    }
    filter.forEach((key) => count += counts[key]);
    return count;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const updateCountData = (light) => {
    counts[light.colour] += 1;
    if (isPredict(light)) {
      if (light.colour === light.predicted) {
        counts.tick += 1;
      } else {
        counts.cross += 1;
      }
    }
  };

  const counts = {
    pulling: 0,
    red:0,
    amber:0,
    green:0,
    timed_out:0,
    faulty:0,
    tick:0,
    cross:0
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const $countTotalBox = $('#traffic-lights-count-total-box');

  const updateTrafficLightsTotalCount = () => {
    const $box = $countTotalBox;
    $box.fadeOut('fast', () => {
      const $count = $totalCount();
      $box.empty().append($count);
      cd.setTip($count, () => cd.showHoverTip($count, trafficLightsTotalCountHoverTip()));
      $box.fadeIn('fast');
    });
  };

  const $totalCount = () => {
    return $('<div>', {
      'class': `${lastLight().colour} traffic-light-count`,
    }).text(cd.trafficLightsCount());
  };

  const trafficLightsTotalCountHoverTip = () => {
    let html = '';
    html += '<table>';
    html += lightTr('red', counts.red);
    html += lightTr('amber', counts.amber);
    html += lightTr('green', counts.green);
    if (counts.timed_out > 0) {
      html += lightTr('timed_out', counts.timed_out);
    }
    if (counts.faulty > 0) {
      html += lightTr('faulty', counts.faulty);
    }
    if (counts.pulling > 0) {
      html += lightTr('pulling', counts.pulling);
    }
    html += '</table>';
    return html;
  };

  const lightTr = (colour, count) => {
    const tr = (s) => `<tr>${s}</tr>`;
    const td = (s) => `<td>${s}</td>`;
    return '' +
      tr(td(`<img
              class="traffic-light-diff-tip-traffic-light-image"
              src="/images/traffic-light/${colour}.png">`) +
         td(`<div class='traffic-light-diff-tip-tag ${colour}'>
              ${count}
             </div>`));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const updateTrafficLightsPredictCount = () => {
    const $box = cd.countPredictBox();
    $box.fadeOut('fast', () => {
      $box.empty().append(tickBox()).append(crossBox());
      $box.fadeIn('fast');
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const tickBox = () => {
    const light = lastLight();
    const $tickImg = $('<img>', {
      id:'tick-img',
      src:`/images/traffic-light/circle-tick.png`
    });
    const $tickCount = $('<div>', {
      id:'tick-count',
      class:'traffic-light-count'
    }).text(counts.tick);
    const hoverTip = 'correct predictions';
    cd.setTip($tickCount, () => cd.showHoverTip($tickCount, hoverTip));
    return $('<div>', {id:'tick-box'}).append($tickImg).append($tickCount);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const crossBox = () => {
    const light = lastLight();
    const $crossImg = $('<img>', {
      id:'cross-img',
      src:`/images/traffic-light/circle-cross.png`
    });
    const $crossCount = $('<div>', {
      id:'cross-count',
      class:'traffic-light-count'
    }).text(counts.cross);
    const hoverTip = 'incorrect predictions';
    cd.setTip($crossCount, () => cd.showHoverTip($crossCount, hoverTip));
    return $('<div>', {id:'cross-box'}).append($crossImg).append($crossCount);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const lastLight = () => counts.lastLight ? counts.lastLight : { predicted:'none' };

});
</script>
